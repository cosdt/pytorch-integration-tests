name: 'List pull requests'
description: 'list and put output pull requests'
inputs:
  owner:
    description: 'The repository owner'
    required: true
  repository:
    description: 'The repository name'
    required: true
  token:
    description: 'The GitHub token used to create an authenticated client'
    default: ${{ github.token }}
    required: false
  labels:
    description: 'The labels on pull requests'
    required: false
    default: ''
  hours:
    description: 'Pull requests created within this many hours will be listed'
    required: false
    default: '24'
outputs:
  prs:
    description: 'Pull requests to be listed'
    value: ${{ steps.list-pr.outputs.result }}
runs:
  using: "composite"
  steps:
    # See https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#list-pull-requests
    - name: List PRs
      uses: actions/github-script@v7
      id: list-pr
      with:
        github-token: ${{ inputs.token }}
        result-encoding: string
        script: |
          const timeRange = parseInt("${{ inputs.hours }}") * 60 * 60 * 1000;
          const sinceTime = new Date(Date.now() - timeRange).toISOString();
          const input_labels = "${{ inputs.labels }}";
          const labels = input_labels
           ? input_labels.split(/[,\n]/).map(label => label.trim())
           : [];

          const iterator = await github.paginate.iterator(github.rest.pulls.list, {
            owner: "${{ inputs.owner }}",
            repo: "${{ inputs.repository }}",
            state: "open",
            sort: "created",
            direction: "desc",
            per_page: 100,
          });

          const prs = [];
          for await (const resp of iterator) {
            const filtered_prs = resp.data.filter(pr => {
              const hasLabel = labels.length === 0
                || labels.every(label => pr.labels.some(prLabel => prLabel.name === label));

              const createdAt = new Date(pr.created_at);
              const isWithinTimeRange = createdAt >= new Date(sinceTime);

              return hasLabel && isWithinTimeRange;
            });

            prs.push(...filtered_prs);
          }

          if (prs.length > 0) {
            const pr_urls = prs.map(pr => pr.html_url);
            core.info(`prs: ${pr_urls.join("\n")}`);
          }

          const result = prs.map(pr => ({
            pull_request: {
              number: pr.number,
              title: pr.title,
              state: pr.state,
              draft: pr.draft,
              created_at: pr.created_at,
              updated_at: pr.updated_at,
              closed_at: pr.closed_at,
              merged_at: pr.merged_at,
              html_url: pr.html_url,
              base: pr.base.ref,
              head: pr.head.ref,
              labels: pr.labels.map(label => label.name),
            }
          }));

          return JSON.stringify(result);
